import classifiers
import multiclass

def main():
    feature_vectors = "malware_classification/corpus/feature_vectors.zip"
    families = "malware_classification/corpus/sha256_family.csv"
    save = "malware_classification/corpus/storage.pklrick"

    storage = classifiers.Storage(feature_vectors, families, 1000, 1000)
    #storage.save(save)
    #storage = classifiers.Storage.load(save)
    
    classifier = classifiers.SVM(storage, 'malware', 'benign', 0.8)
    #classifier.save(f'malware_classification/corpus/{classifier.name.replace(' ', '_')}.pklrick')
    classifier.test()
    classifier.show_feature_importance()

    # Empty for all possible malware families
    target_classes = []

    #print("Training One-Vs-All SVM classifier")
    #classifier = multiclass.OneVsAll(storage, classifiers.SVM, target_classes, 0.8, 10)
    #classifier.present_confusion_matrix()

    # print("Training One-Vs-One SVM classifier")
    # classifier = multiclass.OneVsOne(storage, classifiers.SVM, target_classes, 0.8, 20)
    # classifier.present_confusion_matrix()

    #best_params, best_accuracy = grid_search(storage, 'malware', 'benign', 0.8)

if __name__ == "__main__":
    main()
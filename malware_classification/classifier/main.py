import classifiers
import multiclass

def grid_search(storage, target_class_positive='malware', target_class_negative='benign', 
                training_percentage=0.8):
    """
    Simple grid search for SVM hyperparameters.
    
    @param:
        storage - Storage object with samples
        target_class_positive - str, target class with value 1
        target_class_negative - str, target class with value -1
        training_percentage - float, percentage of samples to be used for training
        verbose - bool, whether to print progress
    
    @returns:
        tuple of (best_params, best_accuracy)
    """
    # Define parameter grid
    param_grid = {
        'e': [10, 12, 15],           # epochs
        'lr': [0.5, 0.01, 0.005],  # learning rate
        'c': [0.1, 0.05, 0.025]     # regularization parameter
    }
    
    best_accuracy = 0
    best_params = {}
    
    total_combinations = len(param_grid['e']) * len(param_grid['lr']) * len(param_grid['c'])
    current = 0
    
    print(f"Running grid search with {total_combinations} combinations.")
    
    for e in param_grid['e']:
        for lr in param_grid['lr']:
            for c in param_grid['c']:
                current += 1
                print(f"Combination {current}/{total_combinations}: epochs={e}, lr={lr}, C={c}")
                
                # Train model with current parameters
                model = classifiers.SVM(storage, target_class_positive, target_class_negative, 
                            training_percentage, e=e, lr=lr, c=c)
                
                # Test and get accuracy
                accuracy = model.test()
                
                if accuracy > best_accuracy:
                    best_accuracy = accuracy
                    best_params = {'e': e, 'lr': lr, 'c': c}
    
    print(f"Best parameters: {best_params}, accuracy: {best_accuracy:.4f}")
    return best_params, best_accuracy

def main():
    feature_vectors = "malware_classification/corpus/feature_vectors.zip"
    families = "malware_classification/corpus/sha256_family.csv"
    save = "malware_classification/corpus/storage.pklrick"

    storage = classifiers.Storage(feature_vectors, families, 1000, 1000)
    #storage.save(save)
    #storage = classifiers.Storage.load(save)
    
    #classifier = classifiers.SVM(storage, 'malware', 'benign', 0.8)
    #classifier.save(f'malware_classification/corpus/{classifier.name.replace(' ', '_')}.pklrick')
    #classifier.test()

    # Empty for all possible malware families
    target_classes = []

    #print("Training One-Vs-All SVM classifier")
    #classifier = multiclass.OneVsAll(storage, classifiers.SVM, target_classes, 0.8, 10)
    #classifier.present_confusion_matrix()

    # print("Training One-Vs-One SVM classifier")
    # classifier = multiclass.OneVsOne(storage, classifiers.SVM, target_classes, 0.8, 20)
    # classifier.present_confusion_matrix()

    best_params, best_accuracy = grid_search(storage, 'malware', 'benign', 0.8)
    print(f"Best SVM parameters: {best_params}, accuracy: {best_accuracy:.4f}")

if __name__ == "__main__":
    main()
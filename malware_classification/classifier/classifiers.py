# AI Usage Statement
# Tools Used: GitHub Copilot

# Usage: Code completion for transforming csv into a dict with pandas
# Verification: A manually written test that confirms the dict is exactly the same as if reding with csv lib

# Usage: Brainstorming solutions for memory usage issues
# Verification: I didn't ask for specific implementations, only ideas. I decided to do chuncking, and it explained how to go about it. 

# Prohibited Use Compliance: Confirmed

import zipfile
import torch
import numpy as np
import pandas as pd

class Storage:
    '''
    Class for storing data
    '''
    def __init__(self, feature_vectors_file: str, families_file: str):
        self.feature_vectors_file = feature_vectors_file
        self.families_file = families_file

        # initiate lazy load and provide a layer of separation
        self.possible_features = self._possible_features()
        print(f'Possible features: {len(self.possible_features)-1}')
        self.families = self._families()
        self.possible_families = set(self.families.values())

        self.samples = self._samples()

        self.feature_list, self.label_list = self._ordered_lists()

    '''
    def save(self, path):
        with open(path, 'wb') as f:
            pickle.dump(self.__dict__, f)

    @classmethod
    def load(cls, path):
        storage = cls.__new__(cls)  # Create instance without calling __init__
        with open(path, 'rb') as f:
            storage.__dict__ = pickle.load(f)
        return storage
    '''
        
    def _samples(self):
        '''
        Returns a dictionary {sample_hash:vector} (str:dict)
        '''
        samples = {}

        # TODO REMOVE THIS WHEN DONE TESTING
        #i = 100

        with zipfile.ZipFile(self.feature_vectors_file, 'r') as zip:
            m = b = 0

            for feature_file in zip.namelist():
                
                # ignore the zip itself
                if feature_file == 'feature_vectors/':
                    continue

                with zip.open(feature_file) as ff:
                    content = ff.read()
                    features = content.strip().split(b'\n')

                hash = feature_file[len('/feature_vectors/')-1:] # strip the path from the hash

                if hash in self.families.keys():
                    family = self.families[hash]
                    string_label = 'malware'
                    label = 1 # 1 for malware
                    m += 1
                else:
                    string_label = 'benign'
                    label = -1 # -1 for benign
                    b += 1
                
                if b > m: # skip if too many benign samples
                    sample = Sample(hash, self.possible_features) 
                    samples[hash] = sample
                    sample.add_features(features)

                    sample.string_label = string_label
                    sample.label = label
                    sample.family = family

                #if i <= 0:
                #    break
                #i -= 1

        print(f'Benign Samples: {b}')
        print(f'Malware Samples: {m}')
        
        return samples

    def _possible_features(self) -> set:
        '''
        Returns a set of all possible features
        '''
        possible_features = set()

        with zipfile.ZipFile(self.feature_vectors_file, 'r') as zip:
            for feature_file in zip.namelist(): # iterate over all file names
                with zip.open(feature_file) as ff: # read the files
                    content = ff.read()
                    features = content.strip().split(b'\n') # get each line into a list

                    for feature in features:
                        if feature:
                            possible_features.add(feature.strip())
        
        return possible_features
    
    def _families(self):
        '''
        returns a dict {sample_hash:family} (str:str)
        '''
        df = pd.read_csv(self.families_file, header=0) # use first row as a header
        return dict(zip(df['sha256'], df['family']))
    
    def _ordered_lists(self):
        # Fun fact: list comprehension is faster than loops. 
        feature_list = [list(sample.features.values()) for sample in self.samples.values()]
        label_list = [sample.label for sample in self.samples.values()]
        
        return feature_list, label_list 
    
        '''
        X_list = []
        for sample_hash, sample in self.samples.items():
            vector = sample.features
            row = []
            for feature in self.possible_features:
                row.append(vector[feature])
            X_list.append(row)
        '''

class Sample:
    '''
    Class for storing samples
    '''

    def __init__(self, hash, possible_features) -> None:
        self.hash = hash
        
        # assume none of the features are present
        # this takes too much RAM and crashes
        self.features = {feature: 0 for feature in possible_features}

        self.family = None
        self.string_label = None
        self.label = 0 # 0 for unknown
         
    def add_features(self, features: list):
        for feature in features:
            if feature:
                self.features[feature] = 1

class _Algorithm:
    '''
    Generic methods and constructors for ML algorithms
    '''

    def __init__(self, storage: Storage) -> None:
        self.storage = storage
        self.samples = storage.samples
        self.possible_features = storage.possible_features
        self.families = storage.families
        self.possible_families = storage.possible_families

    def train():
        raise NotImplementedError()
    
    def evaluate():
        raise NotImplementedError()

class SVM(_Algorithm):
    '''
    Support Vector Machine Algorithm
    Performs Binary Classification - benign samples are -1 and malware is +1
    '''
    def __init__(self, *args, **kwargs) -> None:
        super(SVM, self).__init__(*args, **kwargs)
        self.name = "Support Vector Machine"
        self.X, self.Y = self.get_tensors()
        self.train_model()
        self.evaluate()

    def get_tensors(self):
        '''
        Returns tuple - X_tensor, Y_tensor
        '''
    
        X_tensor = torch.tensor(self.storage.feature_list, dtype=torch.float32)
        Y_tensor = torch.tensor(self.storage.label_list, dtype=torch.float32)

        return X_tensor, Y_tensor
    
    def train(self, **kwargs):
        '''
        Train model utilizing Stochastic Gradient Descent with Hinge Loss
        loss = max(0, 1 - t * y_pred)
        '''
         
        num_samples, num_features = self.X.shape
         
        #Set weights and bias's to 0
        self.weight = torch.zeros(num_features, dtype=torch.float32, requires_grad=True) 
        self.bias = torch.zeros(1, dtype=torch.float32, requires_grad=True)

        epochs = kwargs.get('e', 5) #number of times model goes through files
        learning_rate = kwargs.get('l', 0.05) #Size of step model takes when adjusting weights and bias
        C = kwargs.get('c', 1.0) #Regularization parameter

        
        
        
        # At the start of each epoch, set the total loss to zero
        for epoch in range(epochs):
            total_loss = 0.0
            
            # For each sample, 
            for i in range(num_samples):
                x_i = self.X[i]             # Features of the file
                y_i = self.Y[i]             # Label (benign or malicious)
                
                # Compute the first prediction: positive if likely malware and negative if likely benign
                y_pred = torch.dot(self.weight, x_i) - self.bias
                
                # max(0, 1 - t * y_pred). - Hinge loss - >= to 1, prediction is correct and confident
                hinge_loss = torch.clamp(1 - y_i * y_pred, min=0)
                
                # Add regularization term to stop weights from becoming too large
                loss = hinge_loss + C * torch.norm(self.weight)**2
                
                # Auto calulcate changes in w and b for loss reducation
                loss.backward()
                
                # Update parameters using SGD and stops pytorch from auto updating
                # Weights added 
                with torch.no_grad():
                    self.weight -= learning_rate * self.weight.grad
                    self.bias -= learning_rate * self.bias.grad
                    
                # Clear out the gradients to recompute next loop
                self.weight.grad.zero_()
                self.bias.grad.zero_()
                
                # Track total loss
                total_loss += loss.item()
        
                print(f'Epoch [{epoch+1}/{epochs}], Loss: {total_loss/num_samples:.4f}')
        print('Training complete.')

    def evaluate(self):
        '''
        Evaluate the SVM using the training data
        '''
        pass
import logging
import zipfile

from functools import lru_cache

logging.basicConfig(
    level=logging.DEBUG,
    format = '%(asctime)s - %(message)s'
)

logger = logging.getLogger(__name__)
logging.disable(50)

class _Algorithm():
    '''
    Generic methods and constructors for ML algorithms
    '''

    def __init__(self, data: list, feature_data: list) -> None:
        self.data = data[0]
        self.feature_data = feature_data[0]
        self.features = set()
        self.feature_vectors = []
        self.process()

    @lru_cache
    def get_features(self):
        with zipfile.ZipFile(self.feature_data, 'r') as f:
            for feature_file in f.namelist():
                with f.open(feature_file) as ff:
                    content = ff.read()
                    self.features.add(content)

        print(f"Number of features: {len(self.features)}")

    @lru_cache
    def process(self) -> None:
        self.get_features()

        with zipfile.ZipFile(self.feature_data, 'r') as f:
            for sample in f.namelist():
                with f.open(sample) as s:
                    content = s.read()

                    vector = dict()

                    for feature in self.features:
                        if feature in content:
                            vector[feature] = 1
                        else:
                            vector[feature] = 0

                    self.feature_vectors.append(vector)

class SVM(_Algorithm):
    '''
    Support Vector Machine Algorithm
    '''
    
    def __init__(self, *args, **kwargs) -> None:
        super(SVM, self).__init__(*args, **kwargs)
        self.name = "Support Vector Machine"